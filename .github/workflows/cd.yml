name: Deploy to Render

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  NODE_VERSION: "18.x"
  REGISTRY: "render.com"
  IMAGE_NAME: "ascs-server-prisma"

jobs:
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 3️⃣ Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4️⃣ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5️⃣ Generate Prisma client
      - name: Generate Prisma Client
        run: npx prisma generate

      # 6️⃣ Build application
      - name: Build application
        run: npm run build

      # 7️⃣ Run tests (if available)
      - name: Run tests
        run: npm test || echo "No tests configured, skipping..."

      # 8️⃣ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

      # 9️⃣ Test Docker image
      - name: Test Docker image
        run: |
          # Test that the image builds and can start
          docker run -d --name test-container -p 3000:3000 \
            -e NODE_ENV=production \
            -e PORT=3000 \
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Wait for container to start
          sleep 15

          # Check if container is running
          docker ps | grep test-container

          # Test health endpoint
          curl -f http://localhost:3000/health || echo "Health endpoint not responding"

          # Clean up test container
          docker stop test-container
          docker rm test-container

      # 🔟 Login to Render (using Render CLI)
      - name: Install Render CLI
        run: |
          curl -fsSL https://render.com/download/cli.sh | bash
          echo "$HOME/.render/bin" >> $GITHUB_PATH

      - name: Login to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render auth login --api-key $RENDER_API_KEY

      # 1️⃣1️⃣ Deploy to Render
      - name: Deploy to Render
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: production
          PORT: 10000
        run: |
          # Create deployment using Render CLI
          render services deploy $RENDER_SERVICE_ID \
            --dockerfile Dockerfile \
            --docker-context . \
            --env-vars \
              DATABASE_URL=$DATABASE_URL \
              JWT_SECRET=$JWT_SECRET \
              NODE_ENV=$NODE_ENV \
              PORT=$PORT

      # 1️⃣2️⃣ Health check
      - name: Health check
        env:
          RENDER_SERVICE_URL: ${{ secrets.RENDER_SERVICE_URL }}
        run: |
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          sleep 60

          # Perform health check
          if [ -n "$RENDER_SERVICE_URL" ]; then
            echo "Performing health check on $RENDER_SERVICE_URL/health"
            curl -f "$RENDER_SERVICE_URL/health" || echo "Health check failed, but deployment may still be in progress"
          else
            echo "RENDER_SERVICE_URL not set, skipping health check"
          fi

      # 1️⃣3️⃣ Clean up
      - name: Clean up
        if: always()
        run: |
          docker rmi ${{ env.IMAGE_NAME }}:${{ github.sha }} || true
          docker rmi ${{ env.IMAGE_NAME }}:latest || true
          docker image prune -f || true

  # Optional: Rollback job (can be triggered manually)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'

    steps:
      - name: Install Render CLI
        run: |
          curl -fsSL https://render.com/download/cli.sh | bash
          echo "$HOME/.render/bin" >> $GITHUB_PATH

      - name: Login to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render auth login --api-key $RENDER_API_KEY

      - name: Rollback deployment
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          render services rollback $RENDER_SERVICE_ID
