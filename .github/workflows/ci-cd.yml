name: ASCS Backend CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # 3Ô∏è‚É£ Cache Node.js dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-ascs-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-ascs-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5Ô∏è‚É£ Generate Prisma client
      - name: Generate Prisma Client
        run: npx prisma generate

      # 6Ô∏è‚É£ Build TypeScript
      - name: Build backend
        run: npm run build

      # 7Ô∏è‚É£ Run tests (optional)
      # - name: Run tests
      #   run: npm test

      # 8Ô∏è‚É£ Test Docker build
      - name: Test Docker build
        run: |
          docker build -t ascs-backend:test .
          docker images ascs-backend:test

      # 9Ô∏è‚É£ Test Docker image functionality
      - name: Test Docker image
        run: |
          # Test that the image can start and responds to health checks
          docker run -d --name ascs-test -p 3001:3000 \
            -e NODE_ENV=test \
            -e PORT=3000 \
            ascs-backend:test

          # Wait for container to start
          sleep 10

          # Check if container is running
          docker ps | grep ascs-test

          # Test health endpoint (if available)
          # curl -f http://localhost:3001/ || echo "Health check endpoint not available"

          # Clean up test container
          docker stop ascs-test
          docker rm ascs-test

      # üîü Test Docker Compose setup
      - name: Test Docker Compose
        run: |
          # Create a test environment file
          echo "NODE_ENV=test" > .env
          echo "PORT=3000" >> .env
          echo "DATABASE_URL=sqlite:./test.db" >> .env

          # Test docker-compose build
          docker compose -f docker-compose.yaml --env-file .env config

          # Clean up test env file
          rm .env

      # 1Ô∏è‚É£1Ô∏è‚É£ Clean up Docker resources
      - name: Clean up Docker resources
        if: always()
        run: |
          # Remove test image to save space
          docker rmi ascs-backend:test || true
          # Clean up any dangling images
          docker image prune -f || true
